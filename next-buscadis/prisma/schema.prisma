// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelos para autenticación
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  anuncios      Anuncio[]
  favoritos     Favorito[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Modelos de la aplicación
model Anuncio {
  id          String   @id @default(cuid())
  titulo      String
  descripcion String   @db.Text
  precio      Float?
  categoria   String
  ubicacion   String?
  imagenes    String[]
  estado      Estado   @default(ACTIVO)
  premium     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  favoritos   Favorito[]

  @@index([categoria])
  @@index([estado])
  @@index([premium])
}

model Favorito {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  userId    String
  anuncioId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  anuncio   Anuncio  @relation(fields: [anuncioId], references: [id], onDelete: Cascade)

  @@unique([userId, anuncioId])
}

enum Role {
  USER
  ADMIN
}

enum Estado {
  ACTIVO
  PAUSADO
  VENDIDO
  ELIMINADO
}
