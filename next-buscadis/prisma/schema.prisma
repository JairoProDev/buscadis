// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelos para autenticación
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Modelos de la aplicación
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Perfil extendido
  bio           String?   @db.Text
  telefono      String?
  ubicacion     String?
  isPremium     Boolean   @default(false)
  premiumUntil  DateTime?
  
  // Relaciones
  accounts      Account[]
  sessions      Session[]
  anuncios      Anuncio[]
  favoritos     Favorito[]
  reviews       Review[]    @relation("UserReviews")
  reviewsRecibidas Review[] @relation("ReceivedReviews")
  mensajes      Mensaje[]   @relation("UserMensajes")
  mensajesRecibidos Mensaje[] @relation("ReceivedMensajes")
  notificaciones Notificacion[]
}

model Anuncio {
  id          String   @id @default(cuid())
  titulo      String
  descripcion String   @db.Text
  precio      Float
  estado      Estado   @default(ACTIVO)
  isPremium   Boolean  @default(false)
  vistas      Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Campos extendidos
  categoria   Categoria @relation(fields: [categoriaId], references: [id])
  categoriaId String
  ubicacion   String
  condicion   Condicion @default(NUEVO)
  envio       Boolean   @default(false)
  precioNegociable Boolean @default(false)
  destacadoHasta DateTime?
  
  // Media
  imagenes    String[]
  video       String?

  // Relaciones
  usuario     User      @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  usuarioId   String
  favoritos   Favorito[]
  reviews     Review[]
  mensajes    Mensaje[]
  etiquetas   EtiquetasEnAnuncios[]
}

model Categoria {
  id          String    @id @default(cuid())
  nombre      String    @unique
  descripcion String?   @db.Text
  icono       String?
  slug        String    @unique
  orden       Int       @default(0)
  parentId    String?
  
  // Relaciones
  parent      Categoria?  @relation("SubCategorias", fields: [parentId], references: [id])
  subCategorias Categoria[] @relation("SubCategorias")
  anuncios    Anuncio[]
}

model Favorito {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  usuario   User     @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  usuarioId String
  anuncio   Anuncio  @relation(fields: [anuncioId], references: [id], onDelete: Cascade)
  anuncioId String

  @@unique([usuarioId, anuncioId])
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      @db.SmallInt
  comentario String? @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  anuncio   Anuncio  @relation(fields: [anuncioId], references: [id], onDelete: Cascade)
  anuncioId String
  autor     User     @relation("UserReviews", fields: [autorId], references: [id], onDelete: Cascade)
  autorId   String
  receptor  User     @relation("ReceivedReviews", fields: [receptorId], references: [id], onDelete: Cascade)
  receptorId String
}

model Mensaje {
  id        String   @id @default(cuid())
  contenido String   @db.Text
  leido     Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  anuncio   Anuncio  @relation(fields: [anuncioId], references: [id], onDelete: Cascade)
  anuncioId String
  emisor    User     @relation("UserMensajes", fields: [emisorId], references: [id], onDelete: Cascade)
  emisorId  String
  receptor  User     @relation("ReceivedMensajes", fields: [receptorId], references: [id], onDelete: Cascade)
  receptorId String
}

model Notificacion {
  id        String   @id @default(cuid())
  tipo      TipoNotificacion
  titulo    String
  mensaje   String   @db.Text
  leida     Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relaciones
  usuario   User     @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  usuarioId String
}

model Etiqueta {
  id          String   @id @default(cuid())
  nombre      String   @unique
  slug        String   @unique
  createdAt   DateTime @default(now())
  
  // Relaciones
  anuncios    EtiquetasEnAnuncios[]
}

model EtiquetasEnAnuncios {
  etiqueta   Etiqueta @relation(fields: [etiquetaId], references: [id])
  etiquetaId String
  anuncio    Anuncio  @relation(fields: [anuncioId], references: [id])
  anuncioId  String

  @@id([etiquetaId, anuncioId])
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

enum Estado {
  ACTIVO
  PAUSADO
  VENDIDO
  ELIMINADO
}

enum Condicion {
  NUEVO
  COMO_NUEVO
  BUEN_ESTADO
  USADO
  PARA_PIEZAS
}

enum TipoNotificacion {
  MENSAJE
  OFERTA
  SISTEMA
  REVIEW
  VENTA
}
