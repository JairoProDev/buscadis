// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type             String
  provider         String
  providerAccountId String
  refresh_token    String? @db.Text
  access_token     String? @db.Text
  expires_at       Int?
  token_type       String?
  scope            String?
  id_token         String? @db.Text
  session_state    String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  telefono      String?
  ubicacion     String?
  bio           String?   @db.Text
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  adisos        Adiso[]
  favoritos     Favorito[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Adiso {
  id              String    @id @default(cuid())
  titulo          String
  descripcion     String    @db.Text
  precio          Float
  imagenes        String[]
  ubicacion       String
  condicion       String
  envio           Boolean   @default(false)
  precioNegociable Boolean  @default(false)
  estado          Estado    @default(ACTIVO)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoriaId     String
  categoria       Categoria @relation(fields: [categoriaId], references: [id])
  favoritos       Favorito[]
}

model Categoria {
  id      String   @id @default(cuid())
  nombre  String   @unique
  slug    String   @unique
  adisos  Adiso[]
}

model Favorito {
  id        String   @id @default(cuid())
  userId    String
  adisoId   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  adiso     Adiso    @relation(fields: [adisoId], references: [id], onDelete: Cascade)

  @@unique([userId, adisoId])
}

enum Role {
  USER
  ADMIN
}

enum Estado {
  ACTIVO
  PAUSADO
  VENDIDO
  ELIMINADO
}
